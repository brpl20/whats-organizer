# Sem cachê no backend
# proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;

# Supports multi threading for gunicorn and eventlet (using multi process)
# the number of threads is governed by FLASK_PORT_END - FLASK_PORT_START
upstream ${UPSTREAM}_upstream {
    # This special variable gets replaced by the entrypoint script
    # in docker to set up the load balancer acourding to the varibles
    # FLASK_PORT_START and FLASK_PORT_END
    ${UPSTREAM_SERVERS}
    # Previne perda de sessão usando vários workers
    # Use ip_hash em dev e hash em prod (Cloudflare)
    ip_hash;
    # hash $http_cf_connecting_ip consistent;
    keepalive 64;
}

server {
    ${HTTP_OR_SSL}
	http2 on;

    ${CLOUDFLARE_REAL_IP}

    server_name ${NGINX_HOST};
    server_tokens off;
    gzip on;
    gzip_proxied any;
    gzip_comp_level 8;
    gzip_types text/css application/javascript application/json image/svg+xml;

    # Blocks all IPs outside cloudflare's network
    ${CLOUDFLARE_IPS_FIREWALL}

    location / {
        # CORS for www or (root)
        if ($http_origin ~* ${ALLOWED_CORS}) {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
            add_header Access-Control-Allow-Credentials "true";
        }

        proxy_cache off;
        proxy_pass http://${UPSTREAM}_upstream;
    }

    location /socket.io/ {
        # CORS for www or (root)
        if ($scheme = "https") {
            if ($http_origin ~* ${ALLOWED_CORS}) {
                add_header Access-Control-Allow-Origin $http_origin;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
                add_header Access-Control-Allow-Credentials "true";
            }
        }

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_cache off;
        proxy_buffering off;
        proxy_pass http://${UPSTREAM}_upstream/socket.io/;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_read_timeout 60m;
        proxy_send_timeout 60m;
    }

    if ($host !~* ^(${NGINX_HOST})$) {
        return 444;
    }
}
