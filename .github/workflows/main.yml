name: remote ssh command
on:
  push:
    branches:
      - master
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        fingerprint: ${{ secrets.FINGERPRINT }}
        script: |
          export PROJECT=back
          export HOME="/home/back"
          export PROJECT_DIR="${HOME}/whats-organizer-${PROJECT}"
          export ENV_DIR="${HOME}"
          export ERROR=false
          export DISK_USAGE=$(df -h / | grep -E -o "[0-9]+%" | cut -d "%" -f 1)
          export MESSAGE="Whats-Organizer-${PROJECT}:"
          export GIT_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"

          if ! command -v git >/dev/null 2>&1; then
              if command -v pacman >/dev/null 2>&1; then
                pacman --noconfirm -S git
              fi
          fi
          sudo -u back bash <<EOF
          if [ ! -d "${PROJECT_DIR}/.git" ]; then
            rm -rf "${PROJECT_DIR}"
            mkdir -p "${PROJECT_DIR}"
            cd "${PROJECT_DIR}"
            git clone "${GIT_URL}" .
          else
            cd "${PROJECT_DIR}"
            git remote set-url origin "${GIT_URL}"
            git fetch origin master
            git reset --hard origin/master
          fi
          EOF

          mkdir -p zip_tests && chown back:back zip_tests

          sudo -u back bash <<EOF
          cd "${PROJECT_DIR}"
          if [ -f "${ENV_DIR}/.env" ]; then
            cp "${ENV_DIR}/.env" .
          fi
          if [ ! -d .venv ]; then
            python3 -m venv .venv
          fi
          source .venv/bin/activate
          pip3 install -r requirements.txt
          pip3 install playwright==1.49.1
          python3 -m compileall
          EOF


          cp "${PROJECT_DIR}/infra/back@.service" /etc/systemd/system/back@.service
          systemctl daemon-reload
          source .env
          systemctl restart back@$(seq ${FLASK_PORT_START} ${FLASK_PORT_END})
          systemctl enable back@$(seq ${FLASK_PORT_START} ${FLASK_PORT_END})

          if [ ${ERROR} = true ]; then
            export MESSAGE="${MESSAGE} Falhou ao Subir Imagem de Docker!"
          else
            export MESSAGE="${MESSAGE} Build feita com sucesso!"
          fi
          [ "$DISK_USAGE" -lt 90 ] || \
            export MESSAGE="${MESSAGE} *** AVISO: Disco Lotado ***"
          curl -X POST "https://hooks.zapier.com/hooks/catch/1863715/215sl1w/" \
               -H "Content-Type: application/json" \
               -d "{ \"message\": \"${MESSAGE}\" }"


